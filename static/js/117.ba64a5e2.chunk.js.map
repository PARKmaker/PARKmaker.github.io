{"version":3,"file":"static/js/117.ba64a5e2.chunk.js","mappings":"oNAIMA,EAAe,SAACC,GAIrB,MADW,mEACDC,KAAKD,IAAyB,IAAhBA,EAAKE,MAC7B,EAEKC,EAAW,CAChB,iCACA,cAmCKC,EAAY,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAIpB,GAA0BC,EAAAA,EAAAA,UAAS,GAAnC,eAAOC,EAAP,KAAYC,EAAZ,KACA,GAAiCF,EAAAA,EAAAA,UAASH,EAASI,IAAnD,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA2BJ,EAAAA,EAAAA,UAAS,GAApC,eAAOK,EAAP,KAAaC,EAAb,KACA,GAAgCN,EAAAA,EAAAA,WAAS,GAAzC,eAAOO,EAAP,KAAiBC,EAAjB,KA0BA,OAnDmB,SAACC,EAAUC,GAC9B,IAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,YAAU,WACTF,EAAcG,QAAUL,CACxB,GAAE,CAACA,KAEJI,EAAAA,EAAAA,YAAU,WACT,GAAIH,EAAO,CACV,IAAMK,EAAKC,aAAY,WACtBL,EAAcG,SACd,GAAEJ,GACH,OAAO,kBAAMO,cAAcF,EAApB,CACP,CACD,OAAO,WAAQ,CACf,GAAE,CAACL,GACJ,CAWAQ,EACC,WACC,IAAIC,EAASlB,EACTmB,EAAUf,EACVA,EAZO,IAYQR,EAASI,GAAKL,SAChCuB,GAAU,EACVC,EAAU,GAEPD,IAAWtB,EAASD,OACnBG,GACHG,EAAW,GACXI,EAAW,IAEXE,GAAY,IAGbJ,EAAcP,EAASsB,GAAQE,MAAM,EAAGD,IACxClB,EAAWiB,GACXb,EAAWc,EAAU,GAEtB,GACDb,EA5Ba,GA4BM,OAInB,gBACCe,UAAU,mBACVC,MAAO9B,EAAaU,GAAW,CAAC,EAAI,CAAEqB,MAAO,OAC7CC,aAAc,kBAAMjB,GAAY,EAAlB,EACdkB,aAAc,kBAAMzB,EAAMJ,EAASD,QAAUY,GAAY,EAA3C,EAJf,UAMC,eAAGmB,KAAMlC,EAAaU,GAAb,iBAAkCA,EAAlC,cAAwD,GAAjE,WACC,0BAAOA,KACP,6CAIH,EAEDL,EAAU8B,aAAe,CACxB7B,aAAa,GAOd,Q,UC7EA,EApBgB,kBACd,SAAC8B,EAAA,EAAD,CACEC,MAAM,UACNC,YAAY,mEAFd,UAIE,qBAAST,UAAU,OAAOP,GAAG,UAA7B,WACE,6BACE,gBAAKO,UAAU,QAAf,UACE,eAAI,cAAY,UAAhB,UAA0B,SAAC,KAAD,CAAMU,GAAG,WAAT,4BAG9B,iBAAKV,UAAU,WAAf,WACE,6EACA,SAAC,EAAD,QAEF,SAACW,EAAA,EAAD,QAfU,C","sources":["components/Contact/EmailLink.js","pages/Contact.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Validates the first half of an email address.\r\nconst validateText = (text) => {\r\n\t// NOTE: Passes RFC 5322 but not tested on google's standard.\r\n\t// eslint-disable-next-line no-useless-escape\r\n\tconst re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\r\n\treturn re.test(text) || text.length === 0;\r\n};\r\n\r\nconst messages = [\r\n\t\"연락주세요\",\r\n\t\"tkdgus8903\",\r\n\t// 'hello',\r\n\t// 'hola',\r\n\t// 'you-can-email-me-at-literally-anything! Really',\r\n\t// 'well, not anything. But most things',\r\n\t// 'like-this',\r\n\t// 'or-this',\r\n\t// 'but not this :(  ',\r\n\t// 'you.can.also.email.me.with.specific.topics.like',\r\n\t// 'just-saying-hi',\r\n\t// 'please-work-for-us',\r\n\t// 'help',\r\n\t// 'admin',\r\n\t// 'or-I-really-like-your-website',\r\n\t// 'thanks',\r\n];\r\n\r\nconst useInterval = (callback, delay) => {\r\n\tconst savedCallback = useRef();\r\n\r\n\tuseEffect(() => {\r\n\t\tsavedCallback.current = callback;\r\n\t}, [callback]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (delay) {\r\n\t\t\tconst id = setInterval(() => {\r\n\t\t\t\tsavedCallback.current();\r\n\t\t\t}, delay);\r\n\t\t\treturn () => clearInterval(id);\r\n\t\t}\r\n\t\treturn () => {}; // pass linter\r\n\t}, [delay]);\r\n};\r\n\r\nconst EmailLink = ({ loopMessage }) => {\r\n\tconst hold = 50; // ticks to wait after message is complete before rendering next message\r\n\tconst delay = 50; // tick length in mS\r\n\r\n\tconst [idx, updateIter] = useState(0); // points to current message\r\n\tconst [message, updateMessage] = useState(messages[idx]);\r\n\tconst [char, updateChar] = useState(0); // points to current char\r\n\tconst [isActive, setIsActive] = useState(true); // disable when all messages are printed\r\n\r\n\tuseInterval(\r\n\t\t() => {\r\n\t\t\tlet newIdx = idx;\r\n\t\t\tlet newChar = char;\r\n\t\t\tif (char - hold >= messages[idx].length) {\r\n\t\t\t\tnewIdx += 1;\r\n\t\t\t\tnewChar = 0;\r\n\t\t\t}\r\n\t\t\tif (newIdx === messages.length) {\r\n\t\t\t\tif (loopMessage) {\r\n\t\t\t\t\tupdateIter(0);\r\n\t\t\t\t\tupdateChar(0);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsetIsActive(false);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tupdateMessage(messages[newIdx].slice(0, newChar));\r\n\t\t\t\tupdateIter(newIdx);\r\n\t\t\t\tupdateChar(newChar + 1);\r\n\t\t\t}\r\n\t\t},\r\n\t\tisActive ? delay : null\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName=\"inline-container\"\r\n\t\t\tstyle={validateText(message) ? {} : { color: \"red\" }}\r\n\t\t\tonMouseEnter={() => setIsActive(false)}\r\n\t\t\tonMouseLeave={() => idx < messages.length && setIsActive(true)}\r\n\t\t>\r\n\t\t\t<a href={validateText(message) ? `mailto:${message}@gmail.com` : \"\"}>\r\n\t\t\t\t<span>{message}</span>\r\n\t\t\t\t<span>@gmail.com</span>\r\n\t\t\t</a>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nEmailLink.defaultProps = {\r\n\tloopMessage: false,\r\n};\r\n\r\nEmailLink.propTypes = {\r\n\tloopMessage: PropTypes.bool,\r\n};\r\n\r\nexport default EmailLink;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Main from '../layouts/Main';\r\nimport EmailLink from '../components/Contact/EmailLink';\r\nimport ContactIcons from '../components/Contact/ContactIcons';\r\n\r\nconst Contact = () => (\r\n  <Main\r\n    title=\"Contact\"\r\n    description=\"Contact Michael D'Angelo via email @ michael.l.dangelo@gmail.com\"\r\n  >\r\n    <article className=\"post\" id=\"contact\">\r\n      <header>\r\n        <div className=\"title\">\r\n          <h2 data-testid=\"heading\"><Link to=\"/contact\">Contact</Link></h2>\r\n        </div>\r\n      </header>\r\n      <div className=\"email-at\">\r\n        <p>Feel free to get in touch. You can email me at: </p>\r\n        <EmailLink />\r\n      </div>\r\n      <ContactIcons />\r\n    </article>\r\n  </Main>\r\n);\r\n\r\nexport default Contact;\r\n"],"names":["validateText","text","test","length","messages","EmailLink","loopMessage","useState","idx","updateIter","message","updateMessage","char","updateChar","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newIdx","newChar","slice","className","style","color","onMouseEnter","onMouseLeave","href","defaultProps","Main","title","description","to","ContactIcons"],"sourceRoot":""}